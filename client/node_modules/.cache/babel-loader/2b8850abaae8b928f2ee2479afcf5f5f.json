{"ast":null,"code":"var _jsxFileName = \"/Users/cheng0913/Desktop/Top5Lists_HW4/Top5Lists_HW4/client/src/store/index.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction';\nimport AuthContext from '../auth';\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({}); // THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nfunction GlobalStoreContextProvider(props) {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  });\n  const history = useHistory(); // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n\n  const {\n    auth\n  } = useContext(AuthContext); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: payload\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST ITEM\n\n      case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: true,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.addUpdateItemTransaction = function (index, newText) {\n    let oldText = store.currentList.items[index];\n    let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\n    tps.addTransaction(transaction);\n  };\n\n  store.changeListName = async function (id, newName) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n\n      if (top5List.ownerEmail !== auth.user.email) {\n        return;\n      }\n\n      top5List.name = newName;\n\n      async function updateList(top5List) {\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          async function getListPairs(top5List) {\n            const response = await api.getTop5ListPairs();\n\n            if (response.data.success) {\n              let pairsArray = response.data.idNamePairs;\n              let newPairsArray = [];\n\n              for (let i = 0; i < pairsArray.length; i++) {\n                if (pairsArray[i].ownerEmail === auth.user.email) {\n                  newPairsArray.push(pairsArray[i]);\n                }\n              }\n\n              storeReducer({\n                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                payload: {\n                  idNamePairs: newPairsArray,\n                  top5List: top5List\n                }\n              });\n            }\n          }\n\n          getListPairs(top5List);\n        }\n      }\n\n      updateList(top5List);\n    }\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    tps.clearAllTransactions();\n    history.push(\"/\");\n  }; // THIS FUNCTION CREATES A NEW LIST\n\n\n  store.createNewList = async function () {\n    let newListName = \"Untitled\" + store.newListCounter;\n    let payload = {\n      name: newListName,\n      items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n      ownerEmail: auth.user.email\n    };\n    const response = await api.createTop5List(payload);\n\n    if (response.data.success) {\n      tps.clearAllTransactions();\n      let newList = response.data.top5List;\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: newList\n      }); // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n\n      history.push(\"/top5list/\" + newList._id);\n    } else {\n      console.log(\"API FAILED TO CREATE A NEW LIST\");\n    }\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = async function () {\n    const response = await api.getTop5ListPairs();\n\n    if (response.data.success) {\n      let pairsArray = response.data.idNamePairs;\n      let newPairsArray = [];\n\n      for (let i = 0; i < pairsArray.length; i++) {\n        if (pairsArray[i].ownerEmail === auth.user.email) {\n          newPairsArray.push(pairsArray[i]);\n        }\n      }\n\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n        payload: newPairsArray\n      });\n    } else {\n      console.log(\"API FAILED TO GET THE LIST PAIRS\");\n    }\n  }; // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n\n\n  store.markListForDeletion = async function (id) {\n    // GET THE LIST\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: top5List\n      });\n    }\n  };\n\n  store.deleteList = async function (listToDelete) {\n    if (listToDelete.ownerEmail !== auth.user.email) {\n      return;\n    }\n\n    let response = await api.deleteTop5ListById(listToDelete._id);\n\n    if (response.data.success) {\n      store.loadIdNamePairs();\n      history.push(\"/\");\n    }\n  };\n\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n  };\n\n  store.unmarkListForDeletion = function () {\n    storeReducer({\n      type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      response = await api.updateTop5ListById(top5List._id, top5List);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: top5List\n        });\n        history.push(\"/top5list/\" + top5List._id);\n      }\n    }\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.addUpdateItemTransaction = function (index, newText) {\n    let oldText = store.currentList.items[index];\n    let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateItem = function (index, newItem) {\n    store.currentList.items[index] = newItem;\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = async function () {\n    const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n    if (response.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.SET_CURRENT_LIST,\n        payload: store.currentList\n      });\n    }\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  store.canUndo = function () {\n    return tps.hasTransactionToUndo();\n  };\n\n  store.canRedo = function () {\n    return tps.hasTransactionToRedo();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n\n\n  store.setIsItemEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 405,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GlobalStoreContextProvider, \"KXcxQER+1E+Fvo7SefurB2VfaDE=\", false, function () {\n  return [useHistory];\n});\n\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"sources":["/Users/cheng0913/Desktop/Top5Lists_HW4/Top5Lists_HW4/client/src/store/index.js"],"names":["createContext","useContext","useState","useHistory","jsTPS","api","MoveItem_Transaction","UpdateItem_Transaction","AuthContext","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","UNMARK_LIST_FOR_DELETION","SET_CURRENT_LIST","SET_ITEM_EDIT_ACTIVE","SET_LIST_NAME_EDIT_ACTIVE","tps","GlobalStoreContextProvider","props","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","history","auth","storeReducer","action","type","payload","top5List","isListNameEditActive","isItemEditActive","addUpdateItemTransaction","index","newText","oldText","items","transaction","addTransaction","changeListName","id","newName","response","getTop5ListById","data","success","ownerEmail","user","email","name","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","newPairsArray","i","length","push","closeCurrentList","clearAllTransactions","createNewList","newListName","createTop5List","newList","console","log","loadIdNamePairs","markListForDeletion","deleteList","listToDelete","deleteTop5ListById","deleteMarkedList","unmarkListForDeletion","setCurrentList","addMoveItemTransaction","start","end","moveItem","temp","updateCurrentList","updateItem","newItem","undo","undoTransaction","redo","doTransaction","canUndo","hasTransactionToUndo","canRedo","hasTransactionToRedo","setIsListNameEditActive","setIsItemEditActive","children"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null\n    });\n    const history = useHistory();\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: payload\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST ITEM\n            case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: true,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.addUpdateItemTransaction = function (index, newText) {\n        let oldText = store.currentList.items[index];\n        let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\n        tps.addTransaction(transaction);\n    }\n    store.changeListName = async function (id, newName) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            if (top5List.ownerEmail !== auth.user.email) {\n                return\n            }\n            top5List.name = newName;\n            async function updateList(top5List) {\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    async function getListPairs(top5List) {\n                        const response = await api.getTop5ListPairs();\n                        if (response.data.success) {\n                            let pairsArray = response.data.idNamePairs;\n                            let newPairsArray=[];\n                            for (let i = 0; i<pairsArray.length; i++) {\n                                if (pairsArray[i].ownerEmail===auth.user.email) {\n                                newPairsArray.push(pairsArray[i]);\n                                }\n                            }\n                            storeReducer({\n                                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                payload: {\n                                    idNamePairs: newPairsArray,\n                                    top5List: top5List\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(top5List);\n                }\n            }\n            updateList(top5List);\n        }\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        \n        tps.clearAllTransactions();\n        history.push(\"/\");\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"Untitled\" + store.newListCounter;\n        let payload = {\n            name: newListName,\n            items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n            ownerEmail: auth.user.email\n        };\n        const response = await api.createTop5List(payload);\n        if (response.data.success) {\n            tps.clearAllTransactions();\n            let newList = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: newList\n            }\n            );\n\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n            history.push(\"/top5list/\" + newList._id);\n        }\n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            let newPairsArray=[];\n            for (let i = 0; i<pairsArray.length; i++) {\n                if (pairsArray[i].ownerEmail===auth.user.email) {\n                    newPairsArray.push(pairsArray[i]);\n                }\n            }\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: newPairsArray\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        // GET THE LIST\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: top5List\n            });\n        }\n    }\n\n    store.deleteList = async function (listToDelete) {\n        if (listToDelete.ownerEmail !== auth.user.email) {\n            return\n        }\n        let response = await api.deleteTop5ListById(listToDelete._id);\n        if (response.data.success) {\n            store.loadIdNamePairs();\n            history.push(\"/\");\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: top5List\n                });\n                history.push(\"/top5list/\" + top5List._id);\n            }\n        }\n    }\n\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n\n    store.addUpdateItemTransaction = function (index, newText) {\n        let oldText = store.currentList.items[index];\n        let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\n        tps.addTransaction(transaction);\n    }\n\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n\n    store.updateItem = function (index, newItem) {\n        store.currentList.items[index] = newItem;\n        store.updateCurrentList();\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    store.canUndo = function() {\n        return tps.hasTransactionToUndo();\n    }\n\n    store.canRedo = function() {\n        return tps.hasTransactionToRedo();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n    store.setIsItemEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };"]},"metadata":{},"sourceType":"module"}