{"ast":null,"code":"var _jsxFileName = \"/Users/cheng0913/Desktop/Top5Lists/Top5Lists_FInal/client/src/store/index.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport api from '../api';\nimport AuthContext from '../auth';\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({}); // THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  UPDATE_TEMP_LIST_INFO: \"UPDATE_TEMP_LIST_INFO\",\n  SET_EXPAND_LIST_ACTIVE: \"SET_EXPAND_LIST_ACTIVE\",\n  CHANGE_MODE: \"CHANGE_MODE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nfunction GlobalStoreContextProvider(props) {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listMarkedForDeletion: null,\n    tempListInfo: [],\n    isExpandListActive: false,\n    mode: \"home\"\n  });\n  const history = useHistory(); // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n\n  const {\n    auth\n  } = useContext(AuthContext); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            listMarkedForDeletion: null,\n            tempListInfo: store.tempListInfo,\n            isExpandListActive: store.isExpandListActive,\n            mode: store.mode\n          });\n        }\n\n      case GlobalStoreActionType.UPDATE_TEMP_LIST_INFO:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listMarkedForDeletion: null,\n            tempListInfo: payload,\n            isExpandListActive: false,\n            mode: store.mode\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listMarkedForDeletion: null,\n            tempListInfo: [],\n            isExpandListActive: false,\n            mode: store.mode\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.newList,\n            newListCounter: store.newListCounter + 1,\n            listMarkedForDeletion: null,\n            tempListInfo: payload.tempListInfo,\n            isExpandListActive: false,\n            mode: store.mode\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listMarkedForDeletion: null,\n            tempListInfo: [],\n            isExpandListActive: false,\n            mode: store.mode\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listMarkedForDeletion: payload,\n            tempListInfo: [],\n            isExpandListActive: false,\n            mode: store.mode\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listMarkedForDeletion: null,\n            tempListInfo: [],\n            isExpandListActive: false,\n            mode: store.mode\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            listMarkedForDeletion: null,\n            tempListInfo: payload.tempListInfo,\n            isExpandListActive: false,\n            mode: store.mode\n          });\n        }\n\n      case GlobalStoreActionType.SET_EXPAND_LIST_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listMarkedForDeletion: null,\n            tempListInfo: [],\n            isExpandListActive: true,\n            mode: store.mode\n          });\n        }\n\n      case GlobalStoreActionType.CHANGE_MODE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            tempListInfo: store.tempListInfo,\n            isExpandListActive: store.isExpandListActive,\n            mode: payload\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeMode = async function (mode) {\n    storeReducer({\n      type: GlobalStoreActionType.CHANGE_MODE,\n      payload: mode\n    });\n  };\n\n  store.setIsExpandListActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_EXPAND_LIST_ACTIVE,\n      payload: null\n    });\n  };\n\n  store.UpdateList = async function () {\n    console.log(store.tempListInfo);\n\n    for (let i = 0; i < 5; i++) {\n      if (store.currentList.items[i] !== store.tempListInfo[i + 1]) {\n        store.updateItem(i, store.tempListInfo[i + 1]);\n      }\n    }\n\n    if (store.currentList.name !== store.tempListInfo[0]) {\n      store.currentList.name = store.tempListInfo[0];\n    }\n\n    store.updateCurrentList();\n    store.closeCurrentList();\n  };\n\n  store.PublishList = async function () {\n    store.UpdateList().then(() => {\n      store.currentList.published = true;\n      store.currentList.publishedDate = new Date();\n      store.currentList.comments = [];\n      store.updateCurrentList();\n    });\n  };\n\n  store.like = async function (id, username) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      let likes = top5List.likes;\n      let dislikes = top5List.dislikes;\n\n      for (let i = 0; i < dislikes.length; i++) {\n        if (dislikes[i] === username) {\n          dislikes.splice(i, 1);\n          break;\n        }\n      }\n\n      for (let i = 0; i < likes.length; i++) {\n        if (likes[i] === username) {\n          return;\n        }\n      }\n\n      likes.push(username);\n\n      async function updateList(top5List) {\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.sucess) {\n          async function getListPairs(top5List) {\n            const response = await api.getTop5ListPairs();\n\n            if (response.data.sucess) {\n              let pairsArray = response.data.idNamePairs;\n              storeReducer({\n                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                payload: {\n                  idNamePairs: pairsArray,\n                  top5List: top5List\n                }\n              });\n            }\n          }\n\n          getListPairs(top5List);\n        }\n      }\n\n      updateList(top5List);\n    }\n  };\n\n  store.addComment = async function (id, comment) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      top5List.comments.push(comment);\n\n      async function updateList(top5List) {\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.sucess) {\n          async function getListPairs(top5List) {\n            const response = await api.getTop5ListPairs();\n\n            if (response.data.sucess) {\n              let pairsArray = response.data.idNamePairs;\n              storeReducer({\n                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                payload: {\n                  idNamePairs: pairsArray,\n                  top5List: top5List\n                }\n              });\n            }\n          }\n\n          getListPairs(top5List);\n        }\n      }\n\n      updateList(top5List);\n    }\n  };\n\n  store.changeListName = async function (id, newName) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n\n      if (top5List.ownerEmail !== auth.user.email) {\n        return;\n      }\n\n      top5List.name = newName;\n\n      async function updateList(top5List) {\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          async function getListPairs(top5List) {\n            const response = await api.getTop5ListPairs();\n\n            if (response.data.success) {\n              let pairsArray = response.data.idNamePairs;\n              let newPairsArray = [];\n\n              for (let i = 0; i < pairsArray.length; i++) {\n                if (pairsArray[i].ownerEmail === auth.user.email) {\n                  newPairsArray.push(pairsArray[i]);\n                }\n              } //store.loadIdNamePairs();\n\n\n              storeReducer({\n                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                payload: {\n                  idNamePairs: newPairsArray,\n                  top5List: top5List\n                }\n              });\n            }\n          }\n\n          getListPairs(top5List);\n        }\n      }\n\n      updateList(top5List);\n    }\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = async function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    history.push(\"/\");\n    let button = document.getElementById(\"toolbar\");\n    button.style.opacity = \"100%\";\n    button.style.pointerEvents = \"auto\";\n    let button8 = document.getElementById(\"top5-statusbar\");\n    button8.style.opacity = \"100%\";\n    button8.style.pointerEvents = \"auto\";\n  };\n\n  store.checkDuplicates = function (array) {\n    for (let i = 1; i < array.length; i++) {\n      let temp = array[i];\n      let tempArray = array.slice();\n      tempArray = tempArray.map(name => name.toLowerCase());\n      tempArray.splice(i, 1);\n\n      if (tempArray.includes(temp.toLowerCase())) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  store.updateTempListInfo = async function (text, index) {\n    let currentTempListInfo = store.tempListInfo;\n    currentTempListInfo[index] = text;\n    storeReducer({\n      type: GlobalStoreActionType.UPDATE_TEMP_LIST_INFO,\n      payload: currentTempListInfo\n    });\n    let publishable = true;\n\n    for (let i = 0; i < store.idNamePairs.length; i++) {\n      if (store.idNamePairs[i]._id !== store.currentList._id && store.idNamePairs[i].published) {\n        if (store.idNamePairs[i].name.toLowerCase() === store.tempListInfo[0].toLowerCase()) {\n          publishable = false;\n          break;\n        }\n      }\n    }\n\n    if (store.checkDuplicates(store.tempListInfo)) {\n      publishable = false;\n    }\n\n    for (let j = 0; j < 6; j++) {\n      if (store.tempListInfo[j] === \"\" || !store.tempListInfo[j].charAt(0).match(/^[0-9a-z]+$/i)) {\n        publishable = false;\n        break;\n      }\n    }\n\n    if (publishable === false) {\n      let button = document.getElementById(\"publish-button\");\n      button.style.opacity = \"20%\";\n      button.style.pointerEvents = \"none\";\n    } else {\n      let button = document.getElementById(\"publish-button\");\n      button.style.opacity = \"100%\";\n      button.style.pointerEvents = \"auto\";\n    }\n  }; // THIS FUNCTION CREATES A NEW LIST\n\n\n  store.createNewList = async function () {\n    let newListName = \"Untitled\" + store.newListCounter;\n    let payload = {\n      name: newListName,\n      items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n      ownerEmail: auth.user.email,\n      ownerUserName: auth.user.userName,\n      likes: [],\n      dislikes: [],\n      views: \"0\",\n      date: new Date(),\n      published: false,\n      publishedDate: null,\n      comments: null\n    };\n    const response = await api.createTop5List(payload);\n\n    if (response.data.success) {\n      let newList = response.data.top5List;\n      let tempListInfo = [newListName, \"?\", \"?\", \"?\", \"?\", \"?\", newList._id];\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: {\n          newList,\n          tempListInfo\n        }\n      }); // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n\n      history.push(\"/top5list/\" + newList._id);\n      let button = document.getElementById(\"publish-button\");\n      button.style.opacity = \"20%\";\n      button.style.pointerEvents = \"none\";\n    } else {\n      console.log(\"API FAILED TO CREATE A NEW LIST\");\n    }\n  };\n\n  store.search = async function (text) {\n    const response = await api.getTop5ListPairs();\n\n    if (response.data.success) {\n      let pairsArray = response.data.idNamePairs;\n      let newPairsArray = [];\n\n      if (store.mode === \"home\") {\n        for (let i = 0; i < pairsArray.length; i++) {\n          if (pairsArray[i].ownerEmail === auth.user.email) {\n            newPairsArray.push(pairsArray[i]);\n          }\n        }\n      } else if (store.mode === \"all\") {\n        for (let i = 0; i < pairsArray.length; i++) {\n          if (pairsArray[i].published) {\n            newPairsArray.push(pairsArray[i]);\n          }\n        }\n      }\n\n      let filteredPairsArray = [];\n\n      if (store.mode === \"home\" || store.mode === \"all\") {\n        for (let i = 0; i < newPairsArray.length; i++) {\n          if (newPairsArray[i].name.toLowerCase().startsWith(text.toLowerCase())) {\n            filteredPairsArray.push(newPairsArray[i]);\n          }\n        }\n      } else if (store.mode === \"user\") {\n        for (let i = 0; i < pairsArray.length; i++) {\n          if (pairsArray[i].published && pairsArray[i].ownerUserName.toLowerCase() === text.toLowerCase()) {\n            filteredPairsArray.push(pairsArray[i]);\n          }\n        }\n      }\n\n      console.log(filteredPairsArray);\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n        payload: filteredPairsArray\n      });\n    }\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = async function () {\n    //let button = document.getElementById(\"search-bar\")\n    //console.log(button.value)\n    //if (button.value!==\"\") {\n    //return\n    //}\n    const response = await api.getTop5ListPairs();\n\n    if (response.data.success) {\n      document.getElementById(\"top5-statusbar\").style.visibility = \"visible\";\n      let pairsArray = response.data.idNamePairs;\n      let newPairsArray = [];\n\n      if (store.mode === \"home\") {\n        for (let i = 0; i < pairsArray.length; i++) {\n          if (pairsArray[i].ownerEmail === auth.user.email) {\n            newPairsArray.push(pairsArray[i]);\n          }\n        }\n      } else if (store.mode === \"all\") {\n        for (let i = 0; i < pairsArray.length; i++) {\n          if (pairsArray[i].published) {\n            newPairsArray.push(pairsArray[i]);\n          }\n        }\n      }\n\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n        payload: newPairsArray\n      });\n    } else {\n      console.log(\"API FAILED TO GET THE LIST PAIRS\");\n    }\n  }; // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n\n\n  store.markListForDeletion = async function (id) {\n    // GET THE LIST\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: top5List\n      });\n    }\n  };\n\n  store.deleteList = async function (listToDelete) {\n    if (listToDelete.ownerEmail !== auth.user.email) {\n      return;\n    }\n\n    let response = await api.deleteTop5ListById(listToDelete._id);\n\n    if (response.data.success) {\n      store.loadIdNamePairs();\n      history.push(\"/\");\n    }\n  };\n\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n  };\n\n  store.unmarkListForDeletion = function () {\n    storeReducer({\n      type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n  // store.refresh = async function (id) {\n  //     tps.clearAllTransactions();\n  //     let response = await api.getTop5ListById(id);\n  //     if (response.data.success) {\n  //         let top5List = response.data.top5List;\n  //         storeReducer({\n  //             type: GlobalStoreActionType.SET_CURRENT_LIST,\n  //             payload: top5List\n  //         });\n  //         history.push(\"/top5list/\" + top5List._id);\n  //     }\n  //     store.checkRedo();\n  //     store.checkUndo();\n  // }\n\n\n  store.setCurrentList = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n\n      if (top5List.ownerEmail !== auth.user.email) {\n        return;\n      }\n\n      response = await api.updateTop5ListById(top5List._id, top5List);\n\n      if (response.data.success) {\n        let tempListInfo = [top5List.name, top5List.items[0], top5List.items[1], top5List.items[2], top5List.items[3], top5List.items[4], top5List._id];\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: {\n            top5List,\n            tempListInfo\n          }\n        });\n        history.push(\"/top5list/\" + top5List._id);\n        let button = document.getElementById(\"toolbar\");\n        button.style.opacity = \"20%\";\n        button.style.pointerEvents = \"none\";\n        let button8 = document.getElementById(\"top5-statusbar\");\n        button8.style.opacity = \"20%\";\n        button8.style.pointerEvents = \"none\";\n        let publishable = true;\n\n        for (let i = 0; i < store.idNamePairs.length; i++) {\n          if (store.idNamePairs[i]._id !== tempListInfo[6] && store.idNamePairs[i].published) {\n            if (store.idNamePairs[i].name.toLowerCase() === tempListInfo[0].toLowerCase()) {\n              console.log(\"trueeeeee\");\n              publishable = false;\n              break;\n            }\n          }\n        }\n\n        if (store.checkDuplicates(tempListInfo)) {\n          publishable = false;\n        }\n\n        for (let j = 0; j < 6; j++) {\n          if (tempListInfo[j] === \"\" || !tempListInfo[j].charAt(0).match(/^[0-9a-z]+$/i)) {\n            publishable = false;\n            break;\n          }\n        }\n\n        if (publishable === false) {\n          let button = document.getElementById(\"publish-button\");\n          button.style.opacity = \"20%\";\n          button.style.pointerEvents = \"none\";\n        } else {\n          let button = document.getElementById(\"publish-button\");\n          button.style.opacity = \"100%\";\n          button.style.pointerEvents = \"auto\";\n        }\n      }\n    }\n  };\n\n  store.updateItem = function (index, newItem) {\n    store.currentList.items[index] = newItem;\n  };\n\n  store.updateCurrentList = async function () {\n    const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n    if (response.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.SET_CURRENT_LIST,\n        payload: store.currentList\n      });\n    }\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 628,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GlobalStoreContextProvider, \"VUomhOQ3UX9ao2B92ro0JYf9dJM=\", false, function () {\n  return [useHistory];\n});\n\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"sources":["/Users/cheng0913/Desktop/Top5Lists/Top5Lists_FInal/client/src/store/index.js"],"names":["createContext","useContext","useState","useHistory","api","AuthContext","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","UNMARK_LIST_FOR_DELETION","SET_CURRENT_LIST","UPDATE_TEMP_LIST_INFO","SET_EXPAND_LIST_ACTIVE","CHANGE_MODE","GlobalStoreContextProvider","props","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listMarkedForDeletion","tempListInfo","isExpandListActive","mode","history","auth","storeReducer","action","type","payload","top5List","newList","changeMode","setIsExpandListActive","UpdateList","console","log","i","items","updateItem","name","updateCurrentList","closeCurrentList","PublishList","then","published","publishedDate","Date","comments","like","id","username","response","getTop5ListById","data","success","likes","dislikes","length","splice","push","updateList","updateTop5ListById","_id","sucess","getListPairs","getTop5ListPairs","pairsArray","addComment","comment","changeListName","newName","ownerEmail","user","email","newPairsArray","button","document","getElementById","style","opacity","pointerEvents","button8","checkDuplicates","array","temp","tempArray","slice","map","toLowerCase","includes","updateTempListInfo","text","index","currentTempListInfo","publishable","j","charAt","match","createNewList","newListName","ownerUserName","userName","views","date","createTop5List","search","filteredPairsArray","startsWith","loadIdNamePairs","visibility","markListForDeletion","deleteList","listToDelete","deleteTop5ListById","deleteMarkedList","unmarkListForDeletion","setCurrentList","newItem","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,WAAP,MAAwB,SAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,OAAO,MAAMC,kBAAkB,gBAAGN,aAAa,CAAC,EAAD,CAAxC,C,CAEP;AACA;;AACA,OAAO,MAAMO,qBAAqB,GAAG;AACjCC,EAAAA,gBAAgB,EAAE,kBADe;AAEjCC,EAAAA,kBAAkB,EAAE,oBAFa;AAGjCC,EAAAA,eAAe,EAAE,iBAHgB;AAIjCC,EAAAA,kBAAkB,EAAE,oBAJa;AAKjCC,EAAAA,sBAAsB,EAAE,wBALS;AAMjCC,EAAAA,wBAAwB,EAAE,0BANO;AAOjCC,EAAAA,gBAAgB,EAAE,kBAPe;AAQjCC,EAAAA,qBAAqB,EAAE,uBARU;AASjCC,EAAAA,sBAAsB,EAAE,wBATS;AAUjCC,EAAAA,WAAW,EAAE;AAVoB,CAA9B,C,CAaP;AAEA;AACA;;AACA,SAASC,0BAAT,CAAoCC,KAApC,EAA2C;AAAA;;AACvC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC;AAC/BoB,IAAAA,WAAW,EAAE,EADkB;AAE/BC,IAAAA,WAAW,EAAE,IAFkB;AAG/BC,IAAAA,cAAc,EAAE,CAHe;AAI/BC,IAAAA,cAAc,EAAE,KAJe;AAK/BC,IAAAA,qBAAqB,EAAE,IALQ;AAM/BC,IAAAA,YAAY,EAAE,EANiB;AAO/BC,IAAAA,kBAAkB,EAAE,KAPW;AAQ/BC,IAAAA,IAAI,EAAE;AARyB,GAAD,CAAlC;AAUA,QAAMC,OAAO,GAAG3B,UAAU,EAA1B,CAZuC,CAcvC;;AACA,QAAM;AAAE4B,IAAAA;AAAF,MAAW9B,UAAU,CAACI,WAAD,CAA3B,CAfuC,CAiBvC;AACA;;AACA,QAAM2B,YAAY,GAAIC,MAAD,IAAY;AAC7B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBF,MAA1B;;AACA,YAAQC,IAAR;AACI;AACA,WAAK3B,qBAAqB,CAACC,gBAA3B;AAA6C;AACzC,iBAAOa,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEa,OAAO,CAACb,WADT;AAEZC,YAAAA,WAAW,EAAEY,OAAO,CAACC,QAFT;AAGZZ,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZE,YAAAA,qBAAqB,EAAE,IAJX;AAKZC,YAAAA,YAAY,EAAEP,KAAK,CAACO,YALR;AAMZC,YAAAA,kBAAkB,EAAER,KAAK,CAACQ,kBANd;AAOZC,YAAAA,IAAI,EAAET,KAAK,CAACS;AAPA,WAAD,CAAf;AASH;;AACD,WAAKtB,qBAAqB,CAACQ,qBAA3B;AAAkD;AAC9C,iBAAOM,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAEH,KAAK,CAACG,WAFP;AAGZC,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZE,YAAAA,qBAAqB,EAAE,IAJX;AAKZC,YAAAA,YAAY,EAAEQ,OALF;AAMZP,YAAAA,kBAAkB,EAAE,KANR;AAOZC,YAAAA,IAAI,EAAET,KAAK,CAACS;AAPA,WAAD,CAAf;AASH;AACD;;AACA,WAAKtB,qBAAqB,CAACE,kBAA3B;AAA+C;AAC3C,iBAAOY,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAE,IAFD;AAGZC,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZE,YAAAA,qBAAqB,EAAE,IAJX;AAKZC,YAAAA,YAAY,EAAC,EALD;AAMZC,YAAAA,kBAAkB,EAAE,KANR;AAOZC,YAAAA,IAAI,EAAET,KAAK,CAACS;AAPA,WAAD,CAAf;AASH;AACD;;AACA,WAAKtB,qBAAqB,CAACG,eAA3B;AAA4C;AACxC,iBAAOW,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAEY,OAAO,CAACE,OAFT;AAGZb,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAAN,GAAuB,CAH3B;AAIZE,YAAAA,qBAAqB,EAAE,IAJX;AAKZC,YAAAA,YAAY,EAAEQ,OAAO,CAACR,YALV;AAMZC,YAAAA,kBAAkB,EAAE,KANR;AAOZC,YAAAA,IAAI,EAAET,KAAK,CAACS;AAPA,WAAD,CAAf;AASH;AACD;;AACA,WAAKtB,qBAAqB,CAACI,kBAA3B;AAA+C;AAC3C,iBAAOU,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEa,OADD;AAEZZ,YAAAA,WAAW,EAAE,IAFD;AAGZC,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZE,YAAAA,qBAAqB,EAAE,IAJX;AAKZC,YAAAA,YAAY,EAAE,EALF;AAMZC,YAAAA,kBAAkB,EAAE,KANR;AAOZC,YAAAA,IAAI,EAAET,KAAK,CAACS;AAPA,WAAD,CAAf;AASH;AACD;;AACA,WAAKtB,qBAAqB,CAACK,sBAA3B;AAAmD;AAC/C,iBAAOS,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAE,IAFD;AAGZC,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZE,YAAAA,qBAAqB,EAAES,OAJX;AAKZR,YAAAA,YAAY,EAAE,EALF;AAMZC,YAAAA,kBAAkB,EAAE,KANR;AAOZC,YAAAA,IAAI,EAAET,KAAK,CAACS;AAPA,WAAD,CAAf;AASH;AACD;;AACA,WAAKtB,qBAAqB,CAACM,wBAA3B;AAAqD;AACjD,iBAAOQ,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAE,IAFD;AAGZC,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZE,YAAAA,qBAAqB,EAAE,IAJX;AAKZC,YAAAA,YAAY,EAAE,EALF;AAMZC,YAAAA,kBAAkB,EAAE,KANR;AAOZC,YAAAA,IAAI,EAAET,KAAK,CAACS;AAPA,WAAD,CAAf;AASH;AACD;;AACA,WAAKtB,qBAAqB,CAACO,gBAA3B;AAA6C;AACzC,iBAAOO,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAEY,OAAO,CAACC,QAFT;AAGZZ,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZE,YAAAA,qBAAqB,EAAE,IAJX;AAKZC,YAAAA,YAAY,EAAEQ,OAAO,CAACR,YALV;AAMZC,YAAAA,kBAAkB,EAAE,KANR;AAOZC,YAAAA,IAAI,EAAET,KAAK,CAACS;AAPA,WAAD,CAAf;AASH;;AACD,WAAKtB,qBAAqB,CAACS,sBAA3B;AAAmD;AAC/C,iBAAOK,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAEY,OAFD;AAGZX,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZE,YAAAA,qBAAqB,EAAE,IAJX;AAKZC,YAAAA,YAAY,EAAE,EALF;AAMZC,YAAAA,kBAAkB,EAAE,IANR;AAOZC,YAAAA,IAAI,EAAET,KAAK,CAACS;AAPA,WAAD,CAAf;AASH;;AACD,WAAKtB,qBAAqB,CAACU,WAA3B;AAAwC;AACpC,iBAAOI,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAEH,KAAK,CAACG,WAFP;AAGZC,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZE,YAAAA,qBAAqB,EAAEN,KAAK,CAACM,qBAJjB;AAKZC,YAAAA,YAAY,EAAEP,KAAK,CAACO,YALR;AAMZC,YAAAA,kBAAkB,EAAER,KAAK,CAACQ,kBANd;AAOZC,YAAAA,IAAI,EAAEM;AAPM,WAAD,CAAf;AASH;;AACD;AACI,eAAOf,KAAP;AAvHR;AAyHH,GA3HD,CAnBuC,CAgJvC;AACA;AACA;AAEA;;;AACAA,EAAAA,KAAK,CAACkB,UAAN,GAAmB,gBAAgBT,IAAhB,EAAsB;AACrCG,IAAAA,YAAY,CAAC;AACTE,MAAAA,IAAI,EAAE3B,qBAAqB,CAACU,WADnB;AAETkB,MAAAA,OAAO,EAAEN;AAFA,KAAD,CAAZ;AAIH,GALD;;AAMAT,EAAAA,KAAK,CAACmB,qBAAN,GAA8B,YAAY;AACtCP,IAAAA,YAAY,CAAC;AACTE,MAAAA,IAAI,EAAE3B,qBAAqB,CAACS,sBADnB;AAETmB,MAAAA,OAAO,EAAE;AAFA,KAAD,CAAZ;AAIH,GALD;;AAMAf,EAAAA,KAAK,CAACoB,UAAN,GAAmB,kBAAkB;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAYtB,KAAK,CAACO,YAAlB;;AACI,SAAK,IAAIgB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACpB,UAAGvB,KAAK,CAACG,WAAN,CAAkBqB,KAAlB,CAAwBD,CAAxB,MAA6BvB,KAAK,CAACO,YAAN,CAAmBgB,CAAC,GAAC,CAArB,CAAhC,EAAyD;AACrDvB,QAAAA,KAAK,CAACyB,UAAN,CAAiBF,CAAjB,EAAoBvB,KAAK,CAACO,YAAN,CAAmBgB,CAAC,GAAC,CAArB,CAApB;AACH;AACJ;;AACG,QAAGvB,KAAK,CAACG,WAAN,CAAkBuB,IAAlB,KAAyB1B,KAAK,CAACO,YAAN,CAAmB,CAAnB,CAA5B,EAAmD;AAC/CP,MAAAA,KAAK,CAACG,WAAN,CAAkBuB,IAAlB,GAAuB1B,KAAK,CAACO,YAAN,CAAmB,CAAnB,CAAvB;AACH;;AACDP,IAAAA,KAAK,CAAC2B,iBAAN;AACA3B,IAAAA,KAAK,CAAC4B,gBAAN;AACX,GAZD;;AAaA5B,EAAAA,KAAK,CAAC6B,WAAN,GAAoB,kBAAkB;AAClC7B,IAAAA,KAAK,CAACoB,UAAN,GAAmBU,IAAnB,CAAwB,MAAM;AAC1B9B,MAAAA,KAAK,CAACG,WAAN,CAAkB4B,SAAlB,GAA4B,IAA5B;AACA/B,MAAAA,KAAK,CAACG,WAAN,CAAkB6B,aAAlB,GAAkC,IAAIC,IAAJ,EAAlC;AACAjC,MAAAA,KAAK,CAACG,WAAN,CAAkB+B,QAAlB,GAA6B,EAA7B;AACAlC,MAAAA,KAAK,CAAC2B,iBAAN;AACH,KALD;AAMH,GAPD;;AAQA3B,EAAAA,KAAK,CAACmC,IAAN,GAAa,gBAAgBC,EAAhB,EAAoBC,QAApB,EAA8B;AACvC,QAAIC,QAAQ,GAAG,MAAMtD,GAAG,CAACuD,eAAJ,CAAoBH,EAApB,CAArB;;AACA,QAAIE,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,UAAIzB,QAAQ,GAAGsB,QAAQ,CAACE,IAAT,CAAcxB,QAA7B;AACA,UAAI0B,KAAK,GAAG1B,QAAQ,CAAC0B,KAArB;AACA,UAAIC,QAAQ,GAAG3B,QAAQ,CAAC2B,QAAxB;;AACA,WAAK,IAAIpB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACoB,QAAQ,CAACC,MAAzB,EAAiCrB,CAAC,EAAlC,EAAsC;AAClC,YAAGoB,QAAQ,CAACpB,CAAD,CAAR,KAAcc,QAAjB,EAA2B;AACvBM,UAAAA,QAAQ,CAACE,MAAT,CAAgBtB,CAAhB,EAAmB,CAAnB;AACA;AACH;AACJ;;AACD,WAAK,IAAIA,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACmB,KAAK,CAACE,MAAtB,EAA8BrB,CAAC,EAA/B,EAAmC;AAC/B,YAAGmB,KAAK,CAACnB,CAAD,CAAL,KAAWc,QAAd,EAAwB;AACpB;AACH;AACJ;;AACDK,MAAAA,KAAK,CAACI,IAAN,CAAWT,QAAX;;AACA,qBAAeU,UAAf,CAA0B/B,QAA1B,EAAoC;AAChCsB,QAAAA,QAAQ,GAAG,MAAMtD,GAAG,CAACgE,kBAAJ,CAAuBhC,QAAQ,CAACiC,GAAhC,EAAqCjC,QAArC,CAAjB;;AACA,YAAIsB,QAAQ,CAACE,IAAT,CAAcU,MAAlB,EAA0B;AACtB,yBAAeC,YAAf,CAA4BnC,QAA5B,EAAsC;AAClC,kBAAMsB,QAAQ,GAAG,MAAMtD,GAAG,CAACoE,gBAAJ,EAAvB;;AACA,gBAAId,QAAQ,CAACE,IAAT,CAAcU,MAAlB,EAA0B;AACtB,kBAAIG,UAAU,GAAGf,QAAQ,CAACE,IAAT,CAActC,WAA/B;AACAU,cAAAA,YAAY,CAAC;AACTE,gBAAAA,IAAI,EAAE3B,qBAAqB,CAACC,gBADnB;AAET2B,gBAAAA,OAAO,EAAE;AACLb,kBAAAA,WAAW,EAAEmD,UADR;AAELrC,kBAAAA,QAAQ,EAAEA;AAFL;AAFA,eAAD,CAAZ;AAOH;AACJ;;AACDmC,UAAAA,YAAY,CAACnC,QAAD,CAAZ;AACH;AACJ;;AACD+B,MAAAA,UAAU,CAAC/B,QAAD,CAAV;AACH;AACJ,GAvCD;;AAwCAhB,EAAAA,KAAK,CAACsD,UAAN,GAAmB,gBAAgBlB,EAAhB,EAAoBmB,OAApB,EAA6B;AAC5C,QAAIjB,QAAQ,GAAG,MAAMtD,GAAG,CAACuD,eAAJ,CAAoBH,EAApB,CAArB;;AACA,QAAIE,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,UAAIzB,QAAQ,GAAGsB,QAAQ,CAACE,IAAT,CAAcxB,QAA7B;AACAA,MAAAA,QAAQ,CAACkB,QAAT,CAAkBY,IAAlB,CAAuBS,OAAvB;;AACA,qBAAeR,UAAf,CAA0B/B,QAA1B,EAAoC;AAChCsB,QAAAA,QAAQ,GAAG,MAAMtD,GAAG,CAACgE,kBAAJ,CAAuBhC,QAAQ,CAACiC,GAAhC,EAAqCjC,QAArC,CAAjB;;AACA,YAAIsB,QAAQ,CAACE,IAAT,CAAcU,MAAlB,EAA0B;AACtB,yBAAeC,YAAf,CAA4BnC,QAA5B,EAAsC;AAClC,kBAAMsB,QAAQ,GAAG,MAAMtD,GAAG,CAACoE,gBAAJ,EAAvB;;AACA,gBAAId,QAAQ,CAACE,IAAT,CAAcU,MAAlB,EAA0B;AACtB,kBAAIG,UAAU,GAAGf,QAAQ,CAACE,IAAT,CAActC,WAA/B;AACAU,cAAAA,YAAY,CAAC;AACTE,gBAAAA,IAAI,EAAE3B,qBAAqB,CAACC,gBADnB;AAET2B,gBAAAA,OAAO,EAAE;AACLb,kBAAAA,WAAW,EAAEmD,UADR;AAELrC,kBAAAA,QAAQ,EAAEA;AAFL;AAFA,eAAD,CAAZ;AAOH;AACJ;;AACDmC,UAAAA,YAAY,CAACnC,QAAD,CAAZ;AACH;AACJ;;AACD+B,MAAAA,UAAU,CAAC/B,QAAD,CAAV;AACH;AAGJ,GA5BD;;AA8BAhB,EAAAA,KAAK,CAACwD,cAAN,GAAuB,gBAAgBpB,EAAhB,EAAoBqB,OAApB,EAA6B;AAChD,QAAInB,QAAQ,GAAG,MAAMtD,GAAG,CAACuD,eAAJ,CAAoBH,EAApB,CAArB;;AACA,QAAIE,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,UAAIzB,QAAQ,GAAGsB,QAAQ,CAACE,IAAT,CAAcxB,QAA7B;;AACA,UAAIA,QAAQ,CAAC0C,UAAT,KAAwB/C,IAAI,CAACgD,IAAL,CAAUC,KAAtC,EAA6C;AACzC;AACH;;AACD5C,MAAAA,QAAQ,CAACU,IAAT,GAAgB+B,OAAhB;;AACA,qBAAeV,UAAf,CAA0B/B,QAA1B,EAAoC;AAChCsB,QAAAA,QAAQ,GAAG,MAAMtD,GAAG,CAACgE,kBAAJ,CAAuBhC,QAAQ,CAACiC,GAAhC,EAAqCjC,QAArC,CAAjB;;AACA,YAAIsB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,yBAAeU,YAAf,CAA4BnC,QAA5B,EAAsC;AAClC,kBAAMsB,QAAQ,GAAG,MAAMtD,GAAG,CAACoE,gBAAJ,EAAvB;;AACA,gBAAId,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,kBAAIY,UAAU,GAAGf,QAAQ,CAACE,IAAT,CAActC,WAA/B;AACA,kBAAI2D,aAAa,GAAC,EAAlB;;AACA,mBAAK,IAAItC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAC8B,UAAU,CAACT,MAA7B,EAAqCrB,CAAC,EAAtC,EAA0C;AACtC,oBAAI8B,UAAU,CAAC9B,CAAD,CAAV,CAAcmC,UAAd,KAA2B/C,IAAI,CAACgD,IAAL,CAAUC,KAAzC,EAAgD;AAChDC,kBAAAA,aAAa,CAACf,IAAd,CAAmBO,UAAU,CAAC9B,CAAD,CAA7B;AACC;AACJ,eAPsB,CAQvB;;;AACAX,cAAAA,YAAY,CAAC;AACTE,gBAAAA,IAAI,EAAE3B,qBAAqB,CAACC,gBADnB;AAET2B,gBAAAA,OAAO,EAAE;AACLb,kBAAAA,WAAW,EAAE2D,aADR;AAEL7C,kBAAAA,QAAQ,EAAEA;AAFL;AAFA,eAAD,CAAZ;AAOH;AACJ;;AACDmC,UAAAA,YAAY,CAACnC,QAAD,CAAZ;AACH;AACJ;;AACD+B,MAAAA,UAAU,CAAC/B,QAAD,CAAV;AACH;AACJ,GApCD,CA5PuC,CAkSvC;;;AACAhB,EAAAA,KAAK,CAAC4B,gBAAN,GAAyB,kBAAkB;AACvChB,IAAAA,YAAY,CAAC;AACTE,MAAAA,IAAI,EAAE3B,qBAAqB,CAACE,kBADnB;AAET0B,MAAAA,OAAO,EAAE;AAFA,KAAD,CAAZ;AAKAL,IAAAA,OAAO,CAACoC,IAAR,CAAa,GAAb;AACA,QAAIgB,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAb;AACAF,IAAAA,MAAM,CAACG,KAAP,CAAaC,OAAb,GAAqB,MAArB;AACAJ,IAAAA,MAAM,CAACG,KAAP,CAAaE,aAAb,GAA2B,MAA3B;AACA,QAAIC,OAAO,GAAGL,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAAd;AACAI,IAAAA,OAAO,CAACH,KAAR,CAAcC,OAAd,GAAsB,MAAtB;AACAE,IAAAA,OAAO,CAACH,KAAR,CAAcE,aAAd,GAA4B,MAA5B;AACH,GAbD;;AAcAnE,EAAAA,KAAK,CAACqE,eAAN,GAAwB,UAAUC,KAAV,EAAiB;AACrC,SAAK,IAAI/C,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC+C,KAAK,CAAC1B,MAAtB,EAA8BrB,CAAC,EAA/B,EAAmC;AAC/B,UAAIgD,IAAI,GAAGD,KAAK,CAAC/C,CAAD,CAAhB;AACA,UAAIiD,SAAS,GAAGF,KAAK,CAACG,KAAN,EAAhB;AACAD,MAAAA,SAAS,GAACA,SAAS,CAACE,GAAV,CAAchD,IAAI,IAAIA,IAAI,CAACiD,WAAL,EAAtB,CAAV;AACAH,MAAAA,SAAS,CAAC3B,MAAV,CAAiBtB,CAAjB,EAAoB,CAApB;;AACA,UAAIiD,SAAS,CAACI,QAAV,CAAmBL,IAAI,CAACI,WAAL,EAAnB,CAAJ,EAA4C;AACxC,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GAXD;;AAYA3E,EAAAA,KAAK,CAAC6E,kBAAN,GAA2B,gBAAgBC,IAAhB,EAAsBC,KAAtB,EAA6B;AACpD,QAAIC,mBAAmB,GAAGhF,KAAK,CAACO,YAAhC;AACAyE,IAAAA,mBAAmB,CAACD,KAAD,CAAnB,GAA2BD,IAA3B;AACAlE,IAAAA,YAAY,CAAC;AACTE,MAAAA,IAAI,EAAE3B,qBAAqB,CAACQ,qBADnB;AAEToB,MAAAA,OAAO,EAAEiE;AAFA,KAAD,CAAZ;AAIA,QAAIC,WAAW,GAAG,IAAlB;;AACA,SAAK,IAAI1D,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACvB,KAAK,CAACE,WAAN,CAAkB0C,MAAlC,EAA0CrB,CAAC,EAA3C,EAA+C;AAC3C,UAAIvB,KAAK,CAACE,WAAN,CAAkBqB,CAAlB,EAAqB0B,GAArB,KAA2BjD,KAAK,CAACG,WAAN,CAAkB8C,GAA7C,IAAoDjD,KAAK,CAACE,WAAN,CAAkBqB,CAAlB,EAAqBQ,SAA7E,EAAwF;AACpF,YAAI/B,KAAK,CAACE,WAAN,CAAkBqB,CAAlB,EAAqBG,IAArB,CAA0BiD,WAA1B,OAA0C3E,KAAK,CAACO,YAAN,CAAmB,CAAnB,EAAsBoE,WAAtB,EAA9C,EAAmF;AAC/EM,UAAAA,WAAW,GAAG,KAAd;AACA;AACH;AACJ;AACJ;;AACD,QAAIjF,KAAK,CAACqE,eAAN,CAAsBrE,KAAK,CAACO,YAA5B,CAAJ,EAA+C;AAC3C0E,MAAAA,WAAW,GAAG,KAAd;AACH;;AACD,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACpB,UAAGlF,KAAK,CAACO,YAAN,CAAmB2E,CAAnB,MAAwB,EAAxB,IAA8B,CAAClF,KAAK,CAACO,YAAN,CAAmB2E,CAAnB,EAAsBC,MAAtB,CAA6B,CAA7B,EAAgCC,KAAhC,CAAsC,cAAtC,CAAlC,EAAyF;AACrFH,QAAAA,WAAW,GAAG,KAAd;AACA;AACH;AACJ;;AACD,QAAIA,WAAW,KAAG,KAAlB,EAAyB;AACrB,UAAInB,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAAb;AACAF,MAAAA,MAAM,CAACG,KAAP,CAAaC,OAAb,GAAqB,KAArB;AACAJ,MAAAA,MAAM,CAACG,KAAP,CAAaE,aAAb,GAA2B,MAA3B;AACH,KAJD,MAKK;AACD,UAAIL,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAAb;AACAF,MAAAA,MAAM,CAACG,KAAP,CAAaC,OAAb,GAAqB,MAArB;AACAJ,MAAAA,MAAM,CAACG,KAAP,CAAaE,aAAb,GAA2B,MAA3B;AACH;AACJ,GAnCD,CA7TuC,CAiWvC;;;AACAnE,EAAAA,KAAK,CAACqF,aAAN,GAAsB,kBAAkB;AACpC,QAAIC,WAAW,GAAG,aAAatF,KAAK,CAACI,cAArC;AACA,QAAIW,OAAO,GAAG;AACVW,MAAAA,IAAI,EAAE4D,WADI;AAEV9D,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CAFG;AAGVkC,MAAAA,UAAU,EAAE/C,IAAI,CAACgD,IAAL,CAAUC,KAHZ;AAIV2B,MAAAA,aAAa,EAAE5E,IAAI,CAACgD,IAAL,CAAU6B,QAJf;AAKV9C,MAAAA,KAAK,EAAE,EALG;AAMVC,MAAAA,QAAQ,EAAE,EANA;AAOV8C,MAAAA,KAAK,EAAE,GAPG;AAQVC,MAAAA,IAAI,EAAE,IAAIzD,IAAJ,EARI;AASVF,MAAAA,SAAS,EAAE,KATD;AAUVC,MAAAA,aAAa,EAAE,IAVL;AAWVE,MAAAA,QAAQ,EAAE;AAXA,KAAd;AAaA,UAAMI,QAAQ,GAAG,MAAMtD,GAAG,CAAC2G,cAAJ,CAAmB5E,OAAnB,CAAvB;;AACA,QAAIuB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,UAAIxB,OAAO,GAAGqB,QAAQ,CAACE,IAAT,CAAcxB,QAA5B;AACA,UAAIT,YAAY,GAAG,CAAC+E,WAAD,EAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkC,GAAlC,EAAuCrE,OAAO,CAACgC,GAA/C,CAAnB;AACArC,MAAAA,YAAY,CAAC;AACTE,QAAAA,IAAI,EAAE3B,qBAAqB,CAACG,eADnB;AAETyB,QAAAA,OAAO,EAAE;AAACE,UAAAA,OAAD;AAAUV,UAAAA;AAAV;AAFA,OAAD,CAAZ,CAHuB,CASvB;;AACAG,MAAAA,OAAO,CAACoC,IAAR,CAAa,eAAe7B,OAAO,CAACgC,GAApC;AACA,UAAIa,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAAb;AACAF,MAAAA,MAAM,CAACG,KAAP,CAAaC,OAAb,GAAqB,KAArB;AACAJ,MAAAA,MAAM,CAACG,KAAP,CAAaE,aAAb,GAA2B,MAA3B;AACH,KAdD,MAeK;AACD9C,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACH;AACJ,GAlCD;;AAmCAtB,EAAAA,KAAK,CAAC4F,MAAN,GAAe,gBAAgBd,IAAhB,EAAsB;AACjC,UAAMxC,QAAQ,GAAG,MAAMtD,GAAG,CAACoE,gBAAJ,EAAvB;;AACA,QAAId,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,UAAIY,UAAU,GAAGf,QAAQ,CAACE,IAAT,CAActC,WAA/B;AACA,UAAI2D,aAAa,GAAC,EAAlB;;AACA,UAAI7D,KAAK,CAACS,IAAN,KAAa,MAAjB,EAAyB;AACrB,aAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAC8B,UAAU,CAACT,MAA7B,EAAqCrB,CAAC,EAAtC,EAA0C;AACtC,cAAI8B,UAAU,CAAC9B,CAAD,CAAV,CAAcmC,UAAd,KAA2B/C,IAAI,CAACgD,IAAL,CAAUC,KAAzC,EAAgD;AAC5CC,YAAAA,aAAa,CAACf,IAAd,CAAmBO,UAAU,CAAC9B,CAAD,CAA7B;AACH;AACJ;AACJ,OAND,MAOK,IAAIvB,KAAK,CAACS,IAAN,KAAa,KAAjB,EAAwB;AACzB,aAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAC8B,UAAU,CAACT,MAA7B,EAAqCrB,CAAC,EAAtC,EAA0C;AACtC,cAAI8B,UAAU,CAAC9B,CAAD,CAAV,CAAcQ,SAAlB,EAA6B;AACzB8B,YAAAA,aAAa,CAACf,IAAd,CAAmBO,UAAU,CAAC9B,CAAD,CAA7B;AACH;AACJ;AACJ;;AACD,UAAIsE,kBAAkB,GAAG,EAAzB;;AACA,UAAI7F,KAAK,CAACS,IAAN,KAAa,MAAb,IAAuBT,KAAK,CAACS,IAAN,KAAa,KAAxC,EAA+C;AAC3C,aAAK,IAAIc,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACsC,aAAa,CAACjB,MAA9B,EAAsCrB,CAAC,EAAvC,EAA2C;AACvC,cAAIsC,aAAa,CAACtC,CAAD,CAAb,CAAiBG,IAAjB,CAAsBiD,WAAtB,GAAoCmB,UAApC,CAA+ChB,IAAI,CAACH,WAAL,EAA/C,CAAJ,EAAwE;AACpEkB,YAAAA,kBAAkB,CAAC/C,IAAnB,CAAwBe,aAAa,CAACtC,CAAD,CAArC;AACH;AACJ;AACJ,OAND,MAOK,IAAIvB,KAAK,CAACS,IAAN,KAAa,MAAjB,EAAyB;AAC1B,aAAK,IAAIc,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC8B,UAAU,CAACT,MAA3B,EAAmCrB,CAAC,EAApC,EAAwC;AACpC,cAAI8B,UAAU,CAAC9B,CAAD,CAAV,CAAcQ,SAAd,IAA2BsB,UAAU,CAAC9B,CAAD,CAAV,CAAcgE,aAAd,CAA4BZ,WAA5B,OAA4CG,IAAI,CAACH,WAAL,EAA3E,EAA+F;AAC3FkB,YAAAA,kBAAkB,CAAC/C,IAAnB,CAAwBO,UAAU,CAAC9B,CAAD,CAAlC;AACH;AACJ;AACJ;;AACDF,MAAAA,OAAO,CAACC,GAAR,CAAYuE,kBAAZ;AACAjF,MAAAA,YAAY,CAAC;AACTE,QAAAA,IAAI,EAAE3B,qBAAqB,CAACI,kBADnB;AAETwB,QAAAA,OAAO,EAAE8E;AAFA,OAAD,CAAZ;AAIH;AACJ,GAxCD,CArYuC,CA8avC;;;AACA7F,EAAAA,KAAK,CAAC+F,eAAN,GAAwB,kBAAkB;AACtC;AACA;AACA;AACI;AACJ;AACA,UAAMzD,QAAQ,GAAG,MAAMtD,GAAG,CAACoE,gBAAJ,EAAvB;;AACA,QAAId,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvBsB,MAAAA,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CC,KAA1C,CAAgD+B,UAAhD,GAA6D,SAA7D;AACA,UAAI3C,UAAU,GAAGf,QAAQ,CAACE,IAAT,CAActC,WAA/B;AACA,UAAI2D,aAAa,GAAC,EAAlB;;AACA,UAAI7D,KAAK,CAACS,IAAN,KAAa,MAAjB,EAAyB;AACrB,aAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAC8B,UAAU,CAACT,MAA7B,EAAqCrB,CAAC,EAAtC,EAA0C;AACtC,cAAI8B,UAAU,CAAC9B,CAAD,CAAV,CAAcmC,UAAd,KAA2B/C,IAAI,CAACgD,IAAL,CAAUC,KAAzC,EAAgD;AAC5CC,YAAAA,aAAa,CAACf,IAAd,CAAmBO,UAAU,CAAC9B,CAAD,CAA7B;AACH;AACJ;AACJ,OAND,MAOK,IAAIvB,KAAK,CAACS,IAAN,KAAa,KAAjB,EAAwB;AACzB,aAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAC8B,UAAU,CAACT,MAA7B,EAAqCrB,CAAC,EAAtC,EAA0C;AACtC,cAAI8B,UAAU,CAAC9B,CAAD,CAAV,CAAcQ,SAAlB,EAA6B;AACzB8B,YAAAA,aAAa,CAACf,IAAd,CAAmBO,UAAU,CAAC9B,CAAD,CAA7B;AACH;AACJ;AACJ;;AACDX,MAAAA,YAAY,CAAC;AACTE,QAAAA,IAAI,EAAE3B,qBAAqB,CAACI,kBADnB;AAETwB,QAAAA,OAAO,EAAE8C;AAFA,OAAD,CAAZ;AAIH,KAtBD,MAuBK;AACDxC,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACH;AACJ,GAjCD,CA/auC,CAkdvC;AACA;AACA;AACA;;;AACAtB,EAAAA,KAAK,CAACiG,mBAAN,GAA4B,gBAAgB7D,EAAhB,EAAoB;AAC5C;AACA,QAAIE,QAAQ,GAAG,MAAMtD,GAAG,CAACuD,eAAJ,CAAoBH,EAApB,CAArB;;AACA,QAAIE,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,UAAIzB,QAAQ,GAAGsB,QAAQ,CAACE,IAAT,CAAcxB,QAA7B;AACAJ,MAAAA,YAAY,CAAC;AACTE,QAAAA,IAAI,EAAE3B,qBAAqB,CAACK,sBADnB;AAETuB,QAAAA,OAAO,EAAEC;AAFA,OAAD,CAAZ;AAIH;AACJ,GAVD;;AAYAhB,EAAAA,KAAK,CAACkG,UAAN,GAAmB,gBAAgBC,YAAhB,EAA8B;AAC7C,QAAIA,YAAY,CAACzC,UAAb,KAA4B/C,IAAI,CAACgD,IAAL,CAAUC,KAA1C,EAAiD;AAC7C;AACH;;AACD,QAAItB,QAAQ,GAAG,MAAMtD,GAAG,CAACoH,kBAAJ,CAAuBD,YAAY,CAAClD,GAApC,CAArB;;AACA,QAAIX,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvBzC,MAAAA,KAAK,CAAC+F,eAAN;AACArF,MAAAA,OAAO,CAACoC,IAAR,CAAa,GAAb;AACH;AACJ,GATD;;AAWA9C,EAAAA,KAAK,CAACqG,gBAAN,GAAyB,YAAY;AACjCrG,IAAAA,KAAK,CAACkG,UAAN,CAAiBlG,KAAK,CAACM,qBAAvB;AACH,GAFD;;AAIAN,EAAAA,KAAK,CAACsG,qBAAN,GAA8B,YAAY;AACtC1F,IAAAA,YAAY,CAAC;AACTE,MAAAA,IAAI,EAAE3B,qBAAqB,CAACM,wBADnB;AAETsB,MAAAA,OAAO,EAAE;AAFA,KAAD,CAAZ;AAIH,GALD,CAjfuC,CAwfvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAf,EAAAA,KAAK,CAACuG,cAAN,GAAuB,gBAAgBnE,EAAhB,EAAoB;AACvC,QAAIE,QAAQ,GAAG,MAAMtD,GAAG,CAACuD,eAAJ,CAAoBH,EAApB,CAArB;;AACA,QAAIE,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,UAAIzB,QAAQ,GAAGsB,QAAQ,CAACE,IAAT,CAAcxB,QAA7B;;AACA,UAAIA,QAAQ,CAAC0C,UAAT,KAAwB/C,IAAI,CAACgD,IAAL,CAAUC,KAAtC,EAA6C;AACzC;AACH;;AACDtB,MAAAA,QAAQ,GAAG,MAAMtD,GAAG,CAACgE,kBAAJ,CAAuBhC,QAAQ,CAACiC,GAAhC,EAAqCjC,QAArC,CAAjB;;AACA,UAAIsB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,YAAIlC,YAAY,GAAG,CAACS,QAAQ,CAACU,IAAV,EAAgBV,QAAQ,CAACQ,KAAT,CAAe,CAAf,CAAhB,EAAmCR,QAAQ,CAACQ,KAAT,CAAe,CAAf,CAAnC,EAAsDR,QAAQ,CAACQ,KAAT,CAAe,CAAf,CAAtD,EAAyER,QAAQ,CAACQ,KAAT,CAAe,CAAf,CAAzE,EAA4FR,QAAQ,CAACQ,KAAT,CAAe,CAAf,CAA5F,EAA+GR,QAAQ,CAACiC,GAAxH,CAAnB;AACArC,QAAAA,YAAY,CAAC;AACTE,UAAAA,IAAI,EAAE3B,qBAAqB,CAACO,gBADnB;AAETqB,UAAAA,OAAO,EAAE;AAACC,YAAAA,QAAD;AAAWT,YAAAA;AAAX;AAFA,SAAD,CAAZ;AAIAG,QAAAA,OAAO,CAACoC,IAAR,CAAa,eAAe9B,QAAQ,CAACiC,GAArC;AACA,YAAIa,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAb;AACAF,QAAAA,MAAM,CAACG,KAAP,CAAaC,OAAb,GAAqB,KAArB;AACAJ,QAAAA,MAAM,CAACG,KAAP,CAAaE,aAAb,GAA2B,MAA3B;AACA,YAAIC,OAAO,GAAGL,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAAd;AACAI,QAAAA,OAAO,CAACH,KAAR,CAAcC,OAAd,GAAsB,KAAtB;AACAE,QAAAA,OAAO,CAACH,KAAR,CAAcE,aAAd,GAA4B,MAA5B;AAEA,YAAIc,WAAW,GAAG,IAAlB;;AACA,aAAK,IAAI1D,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACvB,KAAK,CAACE,WAAN,CAAkB0C,MAAlC,EAA0CrB,CAAC,EAA3C,EAA+C;AAC3C,cAAIvB,KAAK,CAACE,WAAN,CAAkBqB,CAAlB,EAAqB0B,GAArB,KAA2B1C,YAAY,CAAC,CAAD,CAAvC,IAA8CP,KAAK,CAACE,WAAN,CAAkBqB,CAAlB,EAAqBQ,SAAvE,EAAkF;AAC9E,gBAAI/B,KAAK,CAACE,WAAN,CAAkBqB,CAAlB,EAAqBG,IAArB,CAA0BiD,WAA1B,OAA0CpE,YAAY,CAAC,CAAD,CAAZ,CAAgBoE,WAAhB,EAA9C,EAA6E;AACzEtD,cAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA2D,cAAAA,WAAW,GAAG,KAAd;AACA;AACH;AACJ;AACJ;;AACD,YAAIjF,KAAK,CAACqE,eAAN,CAAsB9D,YAAtB,CAAJ,EAAyC;AACrC0E,UAAAA,WAAW,GAAG,KAAd;AACH;;AACD,aAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACpB,cAAG3E,YAAY,CAAC2E,CAAD,CAAZ,KAAkB,EAAlB,IAAwB,CAAC3E,YAAY,CAAC2E,CAAD,CAAZ,CAAgBC,MAAhB,CAAuB,CAAvB,EAA0BC,KAA1B,CAAgC,cAAhC,CAA5B,EAA6E;AAC5EH,YAAAA,WAAW,GAAG,KAAd;AACD;AACC;AACH;;AACF,YAAIA,WAAW,KAAG,KAAlB,EAAyB;AACrB,cAAInB,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAAb;AACAF,UAAAA,MAAM,CAACG,KAAP,CAAaC,OAAb,GAAqB,KAArB;AACAJ,UAAAA,MAAM,CAACG,KAAP,CAAaE,aAAb,GAA2B,MAA3B;AACH,SAJD,MAKK;AACD,cAAIL,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAAb;AACAF,UAAAA,MAAM,CAACG,KAAP,CAAaC,OAAb,GAAqB,MAArB;AACAJ,UAAAA,MAAM,CAACG,KAAP,CAAaE,aAAb,GAA2B,MAA3B;AACH;AACJ;AACJ;AACJ,GArDD;;AAuDAnE,EAAAA,KAAK,CAACyB,UAAN,GAAmB,UAAUsD,KAAV,EAAiByB,OAAjB,EAA0B;AACzCxG,IAAAA,KAAK,CAACG,WAAN,CAAkBqB,KAAlB,CAAwBuD,KAAxB,IAAiCyB,OAAjC;AACH,GAFD;;AAIAxG,EAAAA,KAAK,CAAC2B,iBAAN,GAA0B,kBAAkB;AACxC,UAAMW,QAAQ,GAAG,MAAMtD,GAAG,CAACgE,kBAAJ,CAAuBhD,KAAK,CAACG,WAAN,CAAkB8C,GAAzC,EAA8CjD,KAAK,CAACG,WAApD,CAAvB;;AACA,QAAImC,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB7B,MAAAA,YAAY,CAAC;AACTE,QAAAA,IAAI,EAAE3B,qBAAqB,CAACO,gBADnB;AAETqB,QAAAA,OAAO,EAAEf,KAAK,CAACG;AAFN,OAAD,CAAZ;AAIH;AACJ,GARD,CArkBuC,CA+kBvC;;;AAEA,sBACI,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE;AAChCH,MAAAA;AADgC,KAApC;AAAA,cAGKD,KAAK,CAAC0G;AAHX;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAxlBQ3G,0B;UAYWf,U;;;KAZXe,0B;AA2lBT,eAAeZ,kBAAf;AACA,SAASY,0BAAT","sourcesContent":["import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    UPDATE_TEMP_LIST_INFO: \"UPDATE_TEMP_LIST_INFO\",\n    SET_EXPAND_LIST_ACTIVE: \"SET_EXPAND_LIST_ACTIVE\",\n    CHANGE_MODE: \"CHANGE_MODE\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        listMarkedForDeletion: null,\n        tempListInfo: [],\n        isExpandListActive: false,\n        mode: \"home\",\n    });\n    const history = useHistory();\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    listMarkedForDeletion: null,\n                    tempListInfo: store.tempListInfo,\n                    isExpandListActive: store.isExpandListActive,\n                    mode: store.mode,\n                });\n            }\n            case GlobalStoreActionType.UPDATE_TEMP_LIST_INFO: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listMarkedForDeletion: null,\n                    tempListInfo: payload,\n                    isExpandListActive: false,\n                    mode: store.mode,\n                })\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listMarkedForDeletion: null,\n                    tempListInfo:[],\n                    isExpandListActive: false,\n                    mode: store.mode,\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.newList,\n                    newListCounter: store.newListCounter + 1,\n                    listMarkedForDeletion: null,\n                    tempListInfo: payload.tempListInfo,\n                    isExpandListActive: false,\n                    mode: store.mode,\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listMarkedForDeletion: null,\n                    tempListInfo: [],\n                    isExpandListActive: false,\n                    mode: store.mode,\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listMarkedForDeletion: payload,\n                    tempListInfo: [],\n                    isExpandListActive: false,\n                    mode: store.mode,\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listMarkedForDeletion: null,\n                    tempListInfo: [],\n                    isExpandListActive: false,\n                    mode: store.mode,\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    listMarkedForDeletion: null,\n                    tempListInfo: payload.tempListInfo,\n                    isExpandListActive: false,\n                    mode: store.mode,\n                });\n            }\n            case GlobalStoreActionType.SET_EXPAND_LIST_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listMarkedForDeletion: null,\n                    tempListInfo: [],\n                    isExpandListActive: true,\n                    mode: store.mode,\n                });\n            }\n            case GlobalStoreActionType.CHANGE_MODE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    tempListInfo: store.tempListInfo,\n                    isExpandListActive: store.isExpandListActive,\n                    mode: payload,\n                })\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeMode = async function (mode) {\n        storeReducer({\n            type: GlobalStoreActionType.CHANGE_MODE,\n            payload: mode\n        });\n    }\n    store.setIsExpandListActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_EXPAND_LIST_ACTIVE,\n            payload: null\n        });\n    }\n    store.UpdateList = async function () {\n        console.log(store.tempListInfo)\n            for (let i=0; i<5; i++) {\n                if(store.currentList.items[i]!==store.tempListInfo[i+1]) {\n                    store.updateItem(i, store.tempListInfo[i+1]);\n                }\n            }\n                if(store.currentList.name!==store.tempListInfo[0]) {\n                    store.currentList.name=store.tempListInfo[0];\n                }\n                store.updateCurrentList();\n                store.closeCurrentList();\n    }\n    store.PublishList = async function () {\n        store.UpdateList().then(() => {\n            store.currentList.published=true;\n            store.currentList.publishedDate = new Date();\n            store.currentList.comments = [];\n            store.updateCurrentList();\n        })\n    }\n    store.like = async function (id, username) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            let likes = top5List.likes;\n            let dislikes = top5List.dislikes;\n            for (let i=0; i<dislikes.length; i++) {\n                if(dislikes[i]===username) {\n                    dislikes.splice(i, 1);\n                    break;\n                }\n            }\n            for (let i=0; i<likes.length; i++) {\n                if(likes[i]===username) {\n                    return;\n                }\n            }\n            likes.push(username);\n            async function updateList(top5List) {\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.sucess) {\n                    async function getListPairs(top5List) {\n                        const response = await api.getTop5ListPairs();\n                        if (response.data.sucess) {\n                            let pairsArray = response.data.idNamePairs;\n                            storeReducer({\n                                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                payload: {\n                                    idNamePairs: pairsArray,\n                                    top5List: top5List\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(top5List);\n                }\n            }\n            updateList(top5List);\n        }\n    }\n    store.addComment = async function (id, comment) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            top5List.comments.push(comment);\n            async function updateList(top5List) {\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.sucess) {\n                    async function getListPairs(top5List) {\n                        const response = await api.getTop5ListPairs();\n                        if (response.data.sucess) {\n                            let pairsArray = response.data.idNamePairs;\n                            storeReducer({\n                                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                payload: {\n                                    idNamePairs: pairsArray,\n                                    top5List: top5List\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(top5List);\n                }\n            }\n            updateList(top5List);\n        }\n       \n        \n    }\n    \n    store.changeListName = async function (id, newName) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            if (top5List.ownerEmail !== auth.user.email) {\n                return\n            }\n            top5List.name = newName;\n            async function updateList(top5List) {\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    async function getListPairs(top5List) {\n                        const response = await api.getTop5ListPairs();\n                        if (response.data.success) {\n                            let pairsArray = response.data.idNamePairs;\n                            let newPairsArray=[];\n                            for (let i = 0; i<pairsArray.length; i++) {\n                                if (pairsArray[i].ownerEmail===auth.user.email) {\n                                newPairsArray.push(pairsArray[i]);\n                                }\n                            }\n                            //store.loadIdNamePairs();\n                            storeReducer({\n                                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                payload: {\n                                    idNamePairs: newPairsArray,\n                                    top5List: top5List\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(top5List);\n                }\n            }\n            updateList(top5List);\n        }\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = async function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        \n        history.push(\"/\");\n        let button = document.getElementById(\"toolbar\");\n        button.style.opacity=\"100%\";\n        button.style.pointerEvents=\"auto\";\n        let button8 = document.getElementById(\"top5-statusbar\");\n        button8.style.opacity=\"100%\";\n        button8.style.pointerEvents=\"auto\";\n    }\n    store.checkDuplicates = function (array) {\n        for (let i=1; i<array.length; i++) {\n            let temp = array[i];\n            let tempArray = array.slice();\n            tempArray=tempArray.map(name => name.toLowerCase())\n            tempArray.splice(i, 1);\n            if (tempArray.includes(temp.toLowerCase())) {\n                return true;\n            }\n        }\n        return false;\n    }\n    store.updateTempListInfo = async function (text, index) {\n        let currentTempListInfo = store.tempListInfo;\n        currentTempListInfo[index]=text;\n        storeReducer({\n            type: GlobalStoreActionType.UPDATE_TEMP_LIST_INFO,\n            payload: currentTempListInfo\n        })\n        let publishable = true;\n        for (let i=0; i<store.idNamePairs.length; i++) {\n            if (store.idNamePairs[i]._id!==store.currentList._id && store.idNamePairs[i].published) {\n                if (store.idNamePairs[i].name.toLowerCase()===store.tempListInfo[0].toLowerCase()) {\n                    publishable = false;\n                    break;\n                }\n            }\n        }\n        if (store.checkDuplicates(store.tempListInfo)) {\n            publishable = false;\n        }\n        for (let j=0; j<6; j++) {\n            if(store.tempListInfo[j]===\"\" || !store.tempListInfo[j].charAt(0).match(/^[0-9a-z]+$/i)) {\n                publishable = false;\n                break;\n            }\n        }\n        if (publishable===false) {\n            let button = document.getElementById(\"publish-button\");\n            button.style.opacity=\"20%\";\n            button.style.pointerEvents=\"none\";\n        }\n        else {\n            let button = document.getElementById(\"publish-button\");\n            button.style.opacity=\"100%\";\n            button.style.pointerEvents=\"auto\";\n        }\n    }\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"Untitled\" + store.newListCounter;\n        let payload = {\n            name: newListName,\n            items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n            ownerEmail: auth.user.email,\n            ownerUserName: auth.user.userName,\n            likes: [],\n            dislikes: [],\n            views: \"0\",\n            date: new Date(),\n            published: false,\n            publishedDate: null,\n            comments: null,\n        };\n        const response = await api.createTop5List(payload);\n        if (response.data.success) {\n            let newList = response.data.top5List;\n            let tempListInfo = [newListName, \"?\", \"?\", \"?\", \"?\", \"?\", newList._id];\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: {newList, tempListInfo}\n            }\n            );\n\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n            history.push(\"/top5list/\" + newList._id);\n            let button = document.getElementById(\"publish-button\");\n            button.style.opacity=\"20%\";\n            button.style.pointerEvents=\"none\";\n        }\n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n    store.search = async function (text) {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            let newPairsArray=[];\n            if (store.mode===\"home\") {\n                for (let i = 0; i<pairsArray.length; i++) {\n                    if (pairsArray[i].ownerEmail===auth.user.email) {\n                        newPairsArray.push(pairsArray[i]);\n                    }\n                }\n            }\n            else if (store.mode===\"all\") {\n                for (let i = 0; i<pairsArray.length; i++) {\n                    if (pairsArray[i].published) {\n                        newPairsArray.push(pairsArray[i]);\n                    }\n                }\n            }\n            let filteredPairsArray = []\n            if (store.mode===\"home\" || store.mode===\"all\") {\n                for (let i=0; i<newPairsArray.length; i++) {\n                    if (newPairsArray[i].name.toLowerCase().startsWith(text.toLowerCase())) {\n                        filteredPairsArray.push(newPairsArray[i])\n                    }\n                }\n            }\n            else if (store.mode===\"user\") {\n                for (let i=0; i<pairsArray.length; i++) {\n                    if (pairsArray[i].published && pairsArray[i].ownerUserName.toLowerCase()===text.toLowerCase()) {\n                        filteredPairsArray.push(pairsArray[i])\n                    }\n                }\n            }\n            console.log(filteredPairsArray)\n            storeReducer({ \n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: filteredPairsArray\n            });\n        }\n    }\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        //let button = document.getElementById(\"search-bar\")\n        //console.log(button.value)\n        //if (button.value!==\"\") {\n            //return\n        //}\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            document.getElementById(\"top5-statusbar\").style.visibility = \"visible\";\n            let pairsArray = response.data.idNamePairs;\n            let newPairsArray=[];\n            if (store.mode===\"home\") {\n                for (let i = 0; i<pairsArray.length; i++) {\n                    if (pairsArray[i].ownerEmail===auth.user.email) {\n                        newPairsArray.push(pairsArray[i]);\n                    }\n                }\n            }\n            else if (store.mode===\"all\") {\n                for (let i = 0; i<pairsArray.length; i++) {\n                    if (pairsArray[i].published) {\n                        newPairsArray.push(pairsArray[i]);\n                    }\n                }\n            }\n            storeReducer({ \n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: newPairsArray\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        // GET THE LIST\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: top5List\n            });\n        }\n    }\n\n    store.deleteList = async function (listToDelete) {\n        if (listToDelete.ownerEmail !== auth.user.email) {\n            return\n        }\n        let response = await api.deleteTop5ListById(listToDelete._id);\n        if (response.data.success) {\n            store.loadIdNamePairs();\n            history.push(\"/\");\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    // store.refresh = async function (id) {\n    //     tps.clearAllTransactions();\n    //     let response = await api.getTop5ListById(id);\n    //     if (response.data.success) {\n    //         let top5List = response.data.top5List;\n    //         storeReducer({\n    //             type: GlobalStoreActionType.SET_CURRENT_LIST,\n    //             payload: top5List\n    //         });\n    //         history.push(\"/top5list/\" + top5List._id);\n    //     }\n    //     store.checkRedo();\n    //     store.checkUndo();\n    // }\n    store.setCurrentList = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            if (top5List.ownerEmail !== auth.user.email) {\n                return\n            }\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                let tempListInfo = [top5List.name, top5List.items[0], top5List.items[1], top5List.items[2], top5List.items[3], top5List.items[4], top5List._id]\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: {top5List, tempListInfo}\n                });\n                history.push(\"/top5list/\" + top5List._id);\n                let button = document.getElementById(\"toolbar\");\n                button.style.opacity=\"20%\";\n                button.style.pointerEvents=\"none\";\n                let button8 = document.getElementById(\"top5-statusbar\");\n                button8.style.opacity=\"20%\";\n                button8.style.pointerEvents=\"none\";\n\n                let publishable = true;\n                for (let i=0; i<store.idNamePairs.length; i++) {\n                    if (store.idNamePairs[i]._id!==tempListInfo[6] && store.idNamePairs[i].published) {\n                        if (store.idNamePairs[i].name.toLowerCase()===tempListInfo[0].toLowerCase()) {\n                            console.log(\"trueeeeee\")\n                            publishable = false;\n                            break;\n                        }\n                    }\n                }\n                if (store.checkDuplicates(tempListInfo)) {\n                    publishable = false;\n                }\n                for (let j=0; j<6; j++) {\n                    if(tempListInfo[j]===\"\" || !tempListInfo[j].charAt(0).match(/^[0-9a-z]+$/i)) {\n                     publishable = false;\n                    break;\n                    }\n                 }\n                if (publishable===false) {\n                    let button = document.getElementById(\"publish-button\");\n                    button.style.opacity=\"20%\";\n                    button.style.pointerEvents=\"none\";\n                }\n                else {\n                    let button = document.getElementById(\"publish-button\");\n                    button.style.opacity=\"100%\";\n                    button.style.pointerEvents=\"auto\";\n                }\n            }\n        }\n    }\n\n    store.updateItem = function (index, newItem) {\n        store.currentList.items[index] = newItem;\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };"]},"metadata":{},"sourceType":"module"}