{"ast":null,"code":"var _jsxFileName = \"/Users/cheng0913/Desktop/Top5Lists/Top5Lists_FInal/client/src/store/index.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport api from '../api';\nimport AuthContext from '../auth';\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({}); // THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  UPDATE_TEMP_LIST_INFO: \"UPDATE_TEMP_LIST_INFO\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nfunction GlobalStoreContextProvider(props) {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listMarkedForDeletion: null,\n    tempListInfo: []\n  });\n  const history = useHistory(); // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n\n  const {\n    auth\n  } = useContext(AuthContext); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            listMarkedForDeletion: null,\n            tempListInfo: store.tempListInfo\n          });\n        }\n\n      case GlobalStoreActionType.UPDATE_TEMP_LIST_INFO:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            listMarkedForDeletion: null,\n            tempListInfo: payload\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            listMarkedForDeletion: null,\n            tempListInfo: []\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.newList,\n            newListCounter: store.newListCounter + 1,\n            isListNameEditActive: false,\n            listMarkedForDeletion: null,\n            tempListInfo: payload.tempListInfo\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            listMarkedForDeletion: null,\n            tempListInfo: []\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            listMarkedForDeletion: payload,\n            tempListInfo: []\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            listMarkedForDeletion: null,\n            tempListInfo: []\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            listMarkedForDeletion: null,\n            tempListInfo: payload.tempListInfo\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            listMarkedForDeletion: null,\n            tempListInfo: store.tempListInfo\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.UpdateList = function () {\n    for (let i = 0; i < 5; i++) {\n      if (store.currentList.items[i] !== store.tempListInfo[i + 1]) {\n        store.updateItem(i, store.tempListInfo[i + 1]);\n      }\n    }\n\n    if (store.currentList.name !== store.tempListInfo[0]) {\n      store.changeListName(store.currentList._id, store.tempListInfo[0]);\n    }\n\n    store.updateCurrentList();\n    store.closeCurrentList();\n  };\n\n  store.changeListName = async function (id, newName) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n\n      if (top5List.ownerEmail !== auth.user.email) {\n        return;\n      }\n\n      top5List.name = newName;\n\n      async function updateList(top5List) {\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          async function getListPairs(top5List) {\n            const response = await api.getTop5ListPairs();\n\n            if (response.data.success) {\n              let pairsArray = response.data.idNamePairs;\n              let newPairsArray = [];\n\n              for (let i = 0; i < pairsArray.length; i++) {\n                if (pairsArray[i].ownerEmail === auth.user.email) {\n                  newPairsArray.push(pairsArray[i]);\n                }\n              } //store.loadIdNamePairs();\n\n\n              storeReducer({\n                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                payload: {\n                  idNamePairs: newPairsArray,\n                  top5List: top5List\n                }\n              });\n            }\n          }\n\n          getListPairs(top5List);\n        }\n      }\n\n      updateList(top5List);\n    }\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    history.push(\"/\");\n    let button = document.getElementById(\"toolbar\");\n    button.style.opacity = \"100%\";\n    button.style.pointerEvents = \"auto\";\n    let button8 = document.getElementById(\"top5-statusbar\");\n    button8.style.opacity = \"100%\";\n    button8.style.pointerEvents = \"auto\";\n  };\n\n  store.checkDuplicates = function (array) {\n    for (let i = 1; i < array.length; i++) {\n      let temp = array[i];\n      let tempArray = array.slice();\n      tempArray.splice(i, 1);\n\n      if (tempArray.includes(temp)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  store.updateTempListInfo = function (text, index) {\n    let currentTempListInfo = store.tempListInfo;\n    currentTempListInfo[index] = text;\n    storeReducer({\n      type: GlobalStoreActionType.UPDATE_TEMP_LIST_INFO,\n      payload: currentTempListInfo\n    });\n    let publishable = true;\n    console.log(store.checkDuplicates(store.tempListInfo));\n\n    for (let j = 0; j < 5; j++) {\n      if (store.tempListInfo[j + 1] === \"\" || !store.tempListInfo[j + 1].charAt(0).match(/^[0-9a-z]+$/i)) {\n        publishable = false;\n        break;\n      }\n    }\n\n    if (publishable === false) {\n      let button = document.getElementById(\"publish-button\");\n      button.style.opacity = \"20%\";\n      button.style.pointerEvents = \"none\";\n    } else {\n      let button = document.getElementById(\"publish-button\");\n      button.style.opacity = \"100%\";\n      button.style.pointerEvents = \"auto\";\n    }\n  }; // THIS FUNCTION CREATES A NEW LIST\n\n\n  store.createNewList = async function () {\n    let newListName = \"Untitled\" + store.newListCounter;\n    let payload = {\n      name: newListName,\n      items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n      ownerEmail: auth.user.email,\n      ownerUserName: auth.user.userName,\n      likes: [],\n      dislikes: [],\n      views: \"0\",\n      date: new Date(),\n      published: false\n    };\n    const response = await api.createTop5List(payload);\n\n    if (response.data.success) {\n      let newList = response.data.top5List;\n      let tempListInfo = [newListName, \"?\", \"?\", \"?\", \"?\", \"?\"];\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: {\n          newList,\n          tempListInfo\n        }\n      }); // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n\n      history.push(\"/top5list/\" + newList._id);\n    } else {\n      console.log(\"API FAILED TO CREATE A NEW LIST\");\n    }\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = async function () {\n    const response = await api.getTop5ListPairs();\n\n    if (response.data.success) {\n      document.getElementById(\"top5-statusbar\").style.visibility = \"visible\";\n      let pairsArray = response.data.idNamePairs;\n      let newPairsArray = [];\n\n      for (let i = 0; i < pairsArray.length; i++) {\n        if (pairsArray[i].ownerEmail === auth.user.email) {\n          newPairsArray.push(pairsArray[i]);\n        }\n      }\n\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n        payload: newPairsArray\n      });\n    } else {\n      console.log(\"API FAILED TO GET THE LIST PAIRS\");\n    }\n  }; // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n\n\n  store.markListForDeletion = async function (id) {\n    // GET THE LIST\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: top5List\n      });\n    }\n  };\n\n  store.deleteList = async function (listToDelete) {\n    if (listToDelete.ownerEmail !== auth.user.email) {\n      return;\n    }\n\n    let response = await api.deleteTop5ListById(listToDelete._id);\n\n    if (response.data.success) {\n      store.loadIdNamePairs();\n      history.push(\"/\");\n    }\n  };\n\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n  };\n\n  store.unmarkListForDeletion = function () {\n    storeReducer({\n      type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n  // store.refresh = async function (id) {\n  //     tps.clearAllTransactions();\n  //     let response = await api.getTop5ListById(id);\n  //     if (response.data.success) {\n  //         let top5List = response.data.top5List;\n  //         storeReducer({\n  //             type: GlobalStoreActionType.SET_CURRENT_LIST,\n  //             payload: top5List\n  //         });\n  //         history.push(\"/top5list/\" + top5List._id);\n  //     }\n  //     store.checkRedo();\n  //     store.checkUndo();\n  // }\n\n\n  store.setCurrentList = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n\n      if (top5List.ownerEmail !== auth.user.email) {\n        return;\n      }\n\n      response = await api.updateTop5ListById(top5List._id, top5List);\n\n      if (response.data.success) {\n        let tempListInfo = [top5List.name, top5List.items[0], top5List.items[1], top5List.items[2], top5List.items[3], top5List.items[4]];\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: {\n            top5List,\n            tempListInfo\n          }\n        });\n        history.push(\"/top5list/\" + top5List._id);\n        let button = document.getElementById(\"toolbar\");\n        button.style.opacity = \"20%\";\n        button.style.pointerEvents = \"none\";\n        let button8 = document.getElementById(\"top5-statusbar\");\n        button8.style.opacity = \"20%\";\n        button8.style.pointerEvents = \"none\";\n        let publishable = true;\n\n        for (let j = 0; j < 5; j++) {\n          if (tempListInfo[j + 1] === \"\" || !tempListInfo[j + 1].charAt(0).match(/^[0-9a-z]+$/i)) {\n            publishable = false;\n            break;\n          }\n        }\n\n        if (publishable === false) {\n          let button = document.getElementById(\"publish-button\");\n          button.style.opacity = \"20%\";\n          button.style.pointerEvents = \"none\";\n        } else {\n          let button = document.getElementById(\"publish-button\");\n          button.style.opacity = \"100%\";\n          button.style.pointerEvents = \"auto\";\n        }\n      }\n    }\n  };\n\n  store.updateItem = function (index, newItem) {\n    store.currentList.items[index] = newItem;\n  };\n\n  store.updateCurrentList = async function () {\n    const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n    if (response.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.SET_CURRENT_LIST,\n        payload: store.currentList\n      });\n    }\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 439,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GlobalStoreContextProvider, \"TOTLjZ+Ixvn1eOe8L4vVOyl9cBU=\", false, function () {\n  return [useHistory];\n});\n\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"sources":["/Users/cheng0913/Desktop/Top5Lists/Top5Lists_FInal/client/src/store/index.js"],"names":["createContext","useContext","useState","useHistory","api","AuthContext","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","UNMARK_LIST_FOR_DELETION","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","UPDATE_TEMP_LIST_INFO","GlobalStoreContextProvider","props","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listMarkedForDeletion","tempListInfo","history","auth","storeReducer","action","type","payload","isListNameEditActive","newList","top5List","UpdateList","i","items","updateItem","name","changeListName","_id","updateCurrentList","closeCurrentList","id","newName","response","getTop5ListById","data","success","ownerEmail","user","email","updateList","updateTop5ListById","getListPairs","getTop5ListPairs","pairsArray","newPairsArray","length","push","button","document","getElementById","style","opacity","pointerEvents","button8","checkDuplicates","array","temp","tempArray","slice","splice","includes","updateTempListInfo","text","index","currentTempListInfo","publishable","console","log","j","charAt","match","createNewList","newListName","ownerUserName","userName","likes","dislikes","views","date","Date","published","createTop5List","loadIdNamePairs","visibility","markListForDeletion","deleteList","listToDelete","deleteTop5ListById","deleteMarkedList","unmarkListForDeletion","setCurrentList","newItem","setIsListNameEditActive","children"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    UPDATE_TEMP_LIST_INFO: \"UPDATE_TEMP_LIST_INFO\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        listMarkedForDeletion: null,\n        tempListInfo: [],\n    });\n    const history = useHistory();\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    listMarkedForDeletion: null,\n                    tempListInfo: store.tempListInfo\n                });\n            }\n            case GlobalStoreActionType.UPDATE_TEMP_LIST_INFO: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    listMarkedForDeletion: null,\n                    tempListInfo: payload\n                })\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    listMarkedForDeletion: null,\n                    tempListInfo:[],\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.newList,\n                    newListCounter: store.newListCounter + 1,\n                    isListNameEditActive: false,\n                    listMarkedForDeletion: null,\n                    tempListInfo: payload.tempListInfo,\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    listMarkedForDeletion: null,\n                    tempListInfo: [],\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    listMarkedForDeletion: payload,\n                    tempListInfo: [],\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    listMarkedForDeletion: null,\n                    tempListInfo: [],\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    listMarkedForDeletion: null,\n                    tempListInfo: payload.tempListInfo,\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    listMarkedForDeletion: null,\n                    tempListInfo: store.tempListInfo\n                });\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.UpdateList = function () {\n        for (let i=0; i<5; i++) {\n            if(store.currentList.items[i]!==store.tempListInfo[i+1]) {\n                store.updateItem(i, store.tempListInfo[i+1]);\n            }\n        }\n        if(store.currentList.name!==store.tempListInfo[0]) {\n            store.changeListName(store.currentList._id, store.tempListInfo[0])\n        }\n        store.updateCurrentList();\n        store.closeCurrentList();\n    }\n    store.changeListName = async function (id, newName) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            if (top5List.ownerEmail !== auth.user.email) {\n                return\n            }\n            top5List.name = newName;\n            async function updateList(top5List) {\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    async function getListPairs(top5List) {\n                        const response = await api.getTop5ListPairs();\n                        if (response.data.success) {\n                            let pairsArray = response.data.idNamePairs;\n                            let newPairsArray=[];\n                            for (let i = 0; i<pairsArray.length; i++) {\n                                if (pairsArray[i].ownerEmail===auth.user.email) {\n                                newPairsArray.push(pairsArray[i]);\n                                }\n                            }\n                            //store.loadIdNamePairs();\n                            storeReducer({\n                                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                payload: {\n                                    idNamePairs: newPairsArray,\n                                    top5List: top5List\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(top5List);\n                }\n            }\n            updateList(top5List);\n        }\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        \n        history.push(\"/\");\n        let button = document.getElementById(\"toolbar\");\n        button.style.opacity=\"100%\";\n        button.style.pointerEvents=\"auto\";\n        let button8 = document.getElementById(\"top5-statusbar\");\n        button8.style.opacity=\"100%\";\n        button8.style.pointerEvents=\"auto\";\n    }\n    store.checkDuplicates = function (array) {\n        for (let i=1; i<array.length; i++) {\n            let temp = array[i];\n            let tempArray = array.slice();\n            tempArray.splice(i, 1);\n            if (tempArray.includes(temp)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    store.updateTempListInfo = function (text, index) {\n        let currentTempListInfo = store.tempListInfo;\n        currentTempListInfo[index]=text;\n        storeReducer({\n            type: GlobalStoreActionType.UPDATE_TEMP_LIST_INFO,\n            payload: currentTempListInfo\n        })\n        let publishable = true;\n        console.log(store.checkDuplicates(store.tempListInfo))\n        for (let j=0; j<5; j++) {\n            if(store.tempListInfo[j+1]===\"\" || !store.tempListInfo[j+1].charAt(0).match(/^[0-9a-z]+$/i)) {\n                publishable = false;\n                break;\n            }\n        }\n        if (publishable===false) {\n            let button = document.getElementById(\"publish-button\");\n            button.style.opacity=\"20%\";\n            button.style.pointerEvents=\"none\";\n        }\n        else {\n            let button = document.getElementById(\"publish-button\");\n            button.style.opacity=\"100%\";\n            button.style.pointerEvents=\"auto\";\n        }\n    }\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"Untitled\" + store.newListCounter;\n        let payload = {\n            name: newListName,\n            items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n            ownerEmail: auth.user.email,\n            ownerUserName: auth.user.userName,\n            likes: [],\n            dislikes: [],\n            views: \"0\",\n            date: new Date(),\n            published: false\n        };\n        const response = await api.createTop5List(payload);\n        if (response.data.success) {\n            let newList = response.data.top5List;\n            let tempListInfo = [newListName, \"?\", \"?\", \"?\", \"?\", \"?\"];\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: {newList, tempListInfo}\n            }\n            );\n\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n            history.push(\"/top5list/\" + newList._id);\n        }\n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            document.getElementById(\"top5-statusbar\").style.visibility = \"visible\";\n            let pairsArray = response.data.idNamePairs;\n            let newPairsArray=[];\n            for (let i = 0; i<pairsArray.length; i++) {\n                if (pairsArray[i].ownerEmail===auth.user.email) {\n                    newPairsArray.push(pairsArray[i]);\n                }\n            }\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: newPairsArray\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        // GET THE LIST\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: top5List\n            });\n        }\n    }\n\n    store.deleteList = async function (listToDelete) {\n        if (listToDelete.ownerEmail !== auth.user.email) {\n            return\n        }\n        let response = await api.deleteTop5ListById(listToDelete._id);\n        if (response.data.success) {\n            store.loadIdNamePairs();\n            history.push(\"/\");\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    // store.refresh = async function (id) {\n    //     tps.clearAllTransactions();\n    //     let response = await api.getTop5ListById(id);\n    //     if (response.data.success) {\n    //         let top5List = response.data.top5List;\n    //         storeReducer({\n    //             type: GlobalStoreActionType.SET_CURRENT_LIST,\n    //             payload: top5List\n    //         });\n    //         history.push(\"/top5list/\" + top5List._id);\n    //     }\n    //     store.checkRedo();\n    //     store.checkUndo();\n    // }\n    store.setCurrentList = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            if (top5List.ownerEmail !== auth.user.email) {\n                return\n            }\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                let tempListInfo = [top5List.name, top5List.items[0], top5List.items[1], top5List.items[2], top5List.items[3], top5List.items[4]]\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: {top5List, tempListInfo}\n                });\n                history.push(\"/top5list/\" + top5List._id);\n                let button = document.getElementById(\"toolbar\");\n                button.style.opacity=\"20%\";\n                button.style.pointerEvents=\"none\";\n                let button8 = document.getElementById(\"top5-statusbar\");\n                button8.style.opacity=\"20%\";\n                button8.style.pointerEvents=\"none\";\n\n                let publishable = true;\n                for (let j=0; j<5; j++) {\n                    if(tempListInfo[j+1]===\"\" || !tempListInfo[j+1].charAt(0).match(/^[0-9a-z]+$/i)) {\n                     publishable = false;\n                    break;\n                    }\n                 }\n                if (publishable===false) {\n                    let button = document.getElementById(\"publish-button\");\n                    button.style.opacity=\"20%\";\n                    button.style.pointerEvents=\"none\";\n                }\n                else {\n                    let button = document.getElementById(\"publish-button\");\n                    button.style.opacity=\"100%\";\n                    button.style.pointerEvents=\"auto\";\n                }\n            }\n        }\n    }\n\n    store.updateItem = function (index, newItem) {\n        store.currentList.items[index] = newItem;\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };"]},"metadata":{},"sourceType":"module"}