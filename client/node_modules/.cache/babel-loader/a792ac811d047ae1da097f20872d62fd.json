{"ast":null,"code":"/*\n    This is our http api, which we use to send requests to\n    our back-end API. Note we`re using the Axios library\n    for doing this, which is an easy to use AJAX-based\n    library. We could (and maybe should) use Fetch, which\n    is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it`s a Promise-\n    based API which helps a lot with asynchronous communication.\n    \n    @author McKilla Gorilla\n*/\nimport axios from 'axios';\naxios.defaults.withCredentials = true;\nconst api = axios.create({\n  baseURL: 'http://localhost:4000/api'\n}); // THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /top5list). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE CALL THE payload, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\n\nexport const createTop5List = payload => api.post(`/top5list/`, payload);\nexport const getAllTop5Lists = () => api.get(`/top5lists/`);\nexport const getTop5ListPairs = id => api.get(`/top5listpairs/${id}`);\nexport const updateTop5ListById = (id, payload) => api.put(`/top5list/${id}`, payload);\nexport const deleteTop5ListById = id => api.delete(`/top5list/${id}`);\nexport const getTop5ListById = id => api.get(`/top5list/${id}`);\nexport const getLoggedIn = () => api.get(`/loggedIn/`);\nexport const registerUser = payload => api.post(`/register/`, payload);\nexport const loginUser = payload => api.post(`/login/`, payload);\nexport const logoutUser = () => api.get(`/logout/`);\nconst apis = {\n  createTop5List,\n  getAllTop5Lists,\n  getTop5ListPairs,\n  updateTop5ListById,\n  deleteTop5ListById,\n  getTop5ListById,\n  getLoggedIn,\n  registerUser,\n  loginUser,\n  logoutUser\n};\nexport default apis;","map":{"version":3,"sources":["/Users/cheng0913/Desktop/Top5Lists_HW4/Top5Lists_HW4/client/src/api/index.js"],"names":["axios","defaults","withCredentials","api","create","baseURL","createTop5List","payload","post","getAllTop5Lists","get","getTop5ListPairs","id","updateTop5ListById","put","deleteTop5ListById","delete","getTop5ListById","getLoggedIn","registerUser","loginUser","logoutUser","apis"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACAA,KAAK,CAACC,QAAN,CAAeC,eAAf,GAAiC,IAAjC;AACA,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAN,CAAa;AACrBC,EAAAA,OAAO,EAAE;AADY,CAAb,CAAZ,C,CAIA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAIC,OAAD,IAAaJ,GAAG,CAACK,IAAJ,CAAU,YAAV,EAAuBD,OAAvB,CAApC;AACP,OAAO,MAAME,eAAe,GAAG,MAAMN,GAAG,CAACO,GAAJ,CAAS,aAAT,CAA9B;AACP,OAAO,MAAMC,gBAAgB,GAAIC,EAAD,IAAQT,GAAG,CAACO,GAAJ,CAAS,kBAAiBE,EAAG,EAA7B,CAAjC;AACP,OAAO,MAAMC,kBAAkB,GAAG,CAACD,EAAD,EAAKL,OAAL,KAAiBJ,GAAG,CAACW,GAAJ,CAAS,aAAYF,EAAG,EAAxB,EAA2BL,OAA3B,CAA5C;AACP,OAAO,MAAMQ,kBAAkB,GAAIH,EAAD,IAAQT,GAAG,CAACa,MAAJ,CAAY,aAAYJ,EAAG,EAA3B,CAAnC;AACP,OAAO,MAAMK,eAAe,GAAIL,EAAD,IAAQT,GAAG,CAACO,GAAJ,CAAS,aAAYE,EAAG,EAAxB,CAAhC;AAEP,OAAO,MAAMM,WAAW,GAAG,MAAMf,GAAG,CAACO,GAAJ,CAAS,YAAT,CAA1B;AACP,OAAO,MAAMS,YAAY,GAAIZ,OAAD,IAAaJ,GAAG,CAACK,IAAJ,CAAU,YAAV,EAAuBD,OAAvB,CAAlC;AACP,OAAO,MAAMa,SAAS,GAAIb,OAAD,IAAaJ,GAAG,CAACK,IAAJ,CAAU,SAAV,EAAoBD,OAApB,CAA/B;AACP,OAAO,MAAMc,UAAU,GAAG,MAAMlB,GAAG,CAACO,GAAJ,CAAS,UAAT,CAAzB;AAEP,MAAMY,IAAI,GAAG;AACThB,EAAAA,cADS;AAETG,EAAAA,eAFS;AAGTE,EAAAA,gBAHS;AAITE,EAAAA,kBAJS;AAKTE,EAAAA,kBALS;AAMTE,EAAAA,eANS;AAQTC,EAAAA,WARS;AASTC,EAAAA,YATS;AAUTC,EAAAA,SAVS;AAWTC,EAAAA;AAXS,CAAb;AAcA,eAAeC,IAAf","sourcesContent":["/*\n    This is our http api, which we use to send requests to\n    our back-end API. Note we`re using the Axios library\n    for doing this, which is an easy to use AJAX-based\n    library. We could (and maybe should) use Fetch, which\n    is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it`s a Promise-\n    based API which helps a lot with asynchronous communication.\n    \n    @author McKilla Gorilla\n*/\n\nimport axios from 'axios'\naxios.defaults.withCredentials = true;\nconst api = axios.create({\n    baseURL: 'http://localhost:4000/api',\n})\n\n// THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /top5list). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE CALL THE payload, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\nexport const createTop5List = (payload) => api.post(`/top5list/`, payload)\nexport const getAllTop5Lists = () => api.get(`/top5lists/`)\nexport const getTop5ListPairs = (id) => api.get(`/top5listpairs/${id}`)\nexport const updateTop5ListById = (id, payload) => api.put(`/top5list/${id}`, payload)\nexport const deleteTop5ListById = (id) => api.delete(`/top5list/${id}`)\nexport const getTop5ListById = (id) => api.get(`/top5list/${id}`)\n\nexport const getLoggedIn = () => api.get(`/loggedIn/`);\nexport const registerUser = (payload) => api.post(`/register/`, payload)\nexport const loginUser = (payload) => api.post(`/login/`, payload)\nexport const logoutUser = () => api.get(`/logout/`)\n\nconst apis = {\n    createTop5List,\n    getAllTop5Lists,\n    getTop5ListPairs,\n    updateTop5ListById,\n    deleteTop5ListById,\n    getTop5ListById,\n\n    getLoggedIn,\n    registerUser,\n    loginUser,\n    logoutUser\n}\n\nexport default apis\n"]},"metadata":{},"sourceType":"module"}